package graph;

import org.junit.Test;
import static org.junit.Assert.*;

/** Unit tests for the Graph class.
 *  @author Ruhao Xia
 */
public class GraphTesting {

    @Test
    public void emptyGraph() {
        DirectedGraph g = new DirectedGraph();
        assertEquals("Initial graph has vertices", 0, g.vertexSize());
        assertEquals("Initial graph has edges", 0, g.edgeSize());
    }

    @Test
    public void sampleDTest() {
        DirectedGraph g = new DirectedGraph();
        g.add();
        g.add();
        g.add();
        g.add(1, 3);
        g.add(3, 2);
        g.add(2, 1);
        g.add(2, 3);
        assertEquals("Size of the graph", 3, g.vertexSize());
        assertEquals("Edges of the graph", 4, g.edgeSize());
        g.add();
        g.remove(2, 1);
        assertEquals("Edges of the graph after removing edge", 3, g.edgeSize());
        assertEquals("Successor of 2 at 0", 3, g.successor(2, 0));
        g.remove(2);
        assertEquals("Contains Vertex", false, g.contains(2));
        assertEquals("Max Vertex", 4, g.maxVertex());
        assertEquals("Size of the graph after removing vertice",
                        3, g.vertexSize());
        g.add(1, 4);
        assertEquals("Contains edge", true, g.contains(1, 4));
        assertEquals("Indegree", 0, g.inDegree(1));
        assertEquals("Outdegree", 2, g.outDegree(1));
        g.add();
        assertEquals("Predecessor of new 2 at 0", 0, g.predecessor(2, 0));
        g.add(1, 1);
        g.add(1, 2);
        g.add(1, 2);
        g.add(2, 2);
        for (int e: g.successors(1)) {
            System.out.print(e + " ");
        }
        System.out.println();
        for (int[] e: g.edges()) {
            System.out.println(e[0] + " -> " + e[1]);
        }
        System.out.println("-----------------");
    }

    @Test
    public void sampleUTest() {
        UndirectedGraph g = new UndirectedGraph();
        g.add();
        g.add();
        g.add();
        g.add(1, 3);
        g.add(3, 2);
        g.add(2, 1);
        assertEquals("Size of the graph", 3, g.vertexSize());
        assertEquals("Edges of the graph", 3, g.edgeSize());
        g.add();
        g.remove(2, 1);
        assertEquals("Edges of the graph after removing edge", 2, g.edgeSize());
        assertEquals("Successor of 2 at 0", 3, g.successor(2, 0));
        g.remove(2);
        assertEquals("Contains Vertex", false, g.contains(2));
        g.add(1, 4);
        assertEquals("Contains edge", true, g.contains(1, 4));
        assertEquals("Contains edge reverse", true, g.contains(4, 1));
        assertEquals("Indegree", 2, g.inDegree(1));
        g.add();
        assertEquals("Predecessor of new 2 at 0", 0, g.predecessor(2, 0));
        g.add(1, 1);
        for (int[] e: g.edges()) {
            System.out.println(e[0] + " -> " + e[1]);
        }
    }

}
