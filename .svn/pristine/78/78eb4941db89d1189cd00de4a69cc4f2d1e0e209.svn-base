package graph;

/* See restrictions in Graph.java. */

import java.util.List;
import java.util.PriorityQueue;
import java.util.Collections;
import java.util.Comparator;
import java.util.ArrayList;

/** The shortest paths through an edge-weighted labeled graph of type GRAPHTYPE.
 *  By overrriding methods getWeight, setWeight, getPredecessor, and
 *  setPredecessor, the client can determine how to get parameters of the
 *  search and to return results.  By overriding estimatedDistance, clients
 *  can search for paths to specific destinations using A* search.
 *  @author
 */
public abstract class ShortestPaths {

    /** The shortest paths in G from SOURCE. */
    public ShortestPaths(Graph G, int source) {
        this(G, source, 0);
    }

    /** A shortest path in G from SOURCE to DEST. */
    public ShortestPaths(Graph G, int source, int dest) {
        _G = G;
        _source = source;
        _dest = dest;
        // FIXME
        _fringe = new PriorityQueue<Integer>(_G.vertexSize(),
                    new NodeDisComparator());
        
    }

    /** Initialize the shortest paths.  Must be called before using
     *  getWeight, getPredecessor, and pathTo. */
    public void setPaths() {
        // FIXME
        for (int v: _G.vertices()) {
            setPredecessor(v, -1);
            setWeight(v, Double.MAX_VALUE);
            _fringe.add(v);
        }
        _fringe.remove(_source);
        setWeight(_source, 0);
        _fringe.add(_source);
        traverse();
    }

    /** Returns the starting vertex. */
    public int getSource() {
        // FIXME
        return _source;
    }

    /** Returns the target vertex, or 0 if there is none. */
    public int getDest() {
        // FIXME
        return _dest;
    }

    /** Returns the current weight of vertex V in the graph.  If V is
     *  not in the graph, returns positive infinity. */
    public abstract double getWeight(int v);

    /** Set getWeight(V) to W. Assumes V is in the graph. */
    protected abstract void setWeight(int v, double w);

    /** Returns the current predecessor vertex of vertex V in the graph, or 0 if
     *  V is not in the graph or has no predecessor. */
    public abstract int getPredecessor(int v);

    /** Set getPredecessor(V) to U. */
    protected abstract void setPredecessor(int v, int u);

    /** Returns an estimated heuristic weight of the shortest path from vertex
     *  V to the destination vertex (if any).  This is assumed to be less
     *  than the actual weight, and is 0 by default. */
    protected double estimatedDistance(int v) {
        return 0.0;
    }

    /** Returns the current weight of edge (U, V) in the graph.  If (U, V) is
     *  not in the graph, returns positive infinity. */
    protected abstract double getWeight(int u, int v);

    /** Returns a list of vertices starting at _source and ending
     *  at V that represents a shortest path to V.  Invalid if there is a
     *  destination vertex other than V. */
    public List<Integer> pathTo(int v) {
        // FIXME
        ArrayList<Integer> preds = new ArrayList<Integer>();
        while (v != _source) {
            preds.add(v);
            v = getPredecessor(v);
        }
        preds.add(_source);
        Collections.reverse(preds);
        return preds;
    }

    /** Returns a list of vertices starting at the source and ending at the
     *  destination vertex. Invalid if the destination is not specified. */
    public List<Integer> pathTo() {
        return pathTo(getDest());
    }

    // FIXME
    private void traverse() {
        outerloop:
        while (!_fringe.isEmpty()) {
            int v = _fringe.poll();
            for (int w: _G.successors(v)) {

                if (getWeight(v) + getWeight(v, w) 
                        < getWeight(w)) {
                    double newdis = getWeight(v) + getWeight(v, w);
                    setWeight(w, newdis);

                    System.out.println("set pred?" + w + v);
                    setPredecessor(w, v);

                    _fringe.remove(w);
                    _fringe.add(w);
                    if (w == _dest) {
                        break;
                    }
                }
            }
        }
    }

    protected class NodeDisComparator 
            implements Comparator<Integer> {
        @Override
        public int compare(Integer x, Integer y) {
            // Assume neither string is null. Real code should
            // probably be more robust
            // You could also just return x.length() - y.length(),
            // which would be more efficient.
            if (getWeight(x) + estimatedDistance(x)
                < getWeight(y) + estimatedDistance(y))
            {
                return -1;
            }
            if (getWeight(x) + estimatedDistance(x)
                > getWeight(y) + estimatedDistance(y))
            {
                return 1;
            }
            return 0;
        }
    }

    // protected static class Node {
    //     private double _dist;
    //     private int _vert;

    //     public Node(int v) {
    //         _dist = Double.MAX_VALUE;
    //         _vert = v;
    //     }

    //     public Node(int v, double d) {
    //         _dist = d;
    //         _vert = v;
    //     }

    //     public int getVert() {
    //         return _vert;
    //     }

    //     public double getDis() {
    //         return _dist;
    //     }

    //     public void changeD(double d) {
    //         _dist = d;
    //     }
    // }


    /** The graph being searched. */
    protected final Graph _G;
    /** The starting vertex. */
    private final int _source;
    /** The target vertex. */
    private final int _dest;
    // FIXME
    private PriorityQueue<Integer> _fringe;
    
}
